{"ast":null,"code":"var _jsxFileName = \"/home/vijay/Desktop/Udemy-Schwarzmuller/forms-&-userinput/01-starting-project/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // Checks if user had a chance of editing the input\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.trim().includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  const nameInputHandler = e => {\n    setEnteredName(e.target.value);\n  };\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n  };\n  const emailInputHandler = e => {\n    setEnteredEmail(e.target.value);\n  };\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n  const formSubmitHandler = e => {\n    setEnteredNameTouched(true);\n    e.preventDefault();\n    // If input is empty, do nothing (dont run code below i.e return)\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n\n    // nameInputRef.current.value = \"\"; => not ideal, leave DOM manipulation to react and not vanilla JS\n    setEnteredName(\"\"); // set state input to an empty string\n    setEnteredEmail(\"\"); // set state input to an empty string\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  /* Name input should be invalid if only both setEnteredNameIsValid is false\n  AND enteredNameTouched (user had a chance to edit input field) is true */\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName //bind the value to set setEnteredName to empty string\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail //bind the value to set setEnteredName to empty string\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"nLPwRBBCARNBsLUgNqKrhA7EIUU=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","nameInputIsInvalid","enteredEmailIsValid","includes","emailInputIsInvalid","formIsValid","nameInputHandler","e","target","value","nameInputBlurHandler","emailInputHandler","emailInputBlurHandler","formSubmitHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["/home/vijay/Desktop/Udemy-Schwarzmuller/forms-&-userinput/01-starting-project/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = props => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // Checks if user had a chance of editing the input\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.trim().includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputHandler = e => {\n    setEnteredName(e.target.value);\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputHandler = e => {\n    setEnteredEmail(e.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmitHandler = e => {\n    setEnteredNameTouched(true);\n\n    e.preventDefault();\n    // If input is empty, do nothing (dont run code below i.e return)\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n\n    // nameInputRef.current.value = \"\"; => not ideal, leave DOM manipulation to react and not vanilla JS\n    setEnteredName(\"\"); // set state input to an empty string\n    setEnteredEmail(\"\"); // set state input to an empty string\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  /* Name input should be invalid if only both setEnteredNameIsValid is false\n  AND enteredNameTouched (user had a chance to edit input field) is true */\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName} //bind the value to set setEnteredName to empty string\n        />\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail} //bind the value to set setEnteredName to empty string\n        />\n      </div>\n      {nameInputIsInvalid && (\n        <p className=\"error-text\">Name must not be empty</p>\n      )}\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}