{"ast":null,"code":"var _jsxFileName = \"/home/vijay/Desktop/Udemy-Schwarzmuller/forms-&-userinput/01-starting-project/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => {\n    value.trim() !== \"\";\n  });\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = /\\S+@\\S+\\.\\S+/.test(enteredEmail);\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  const emailInputHandler = e => {\n    setEnteredEmail(e.target.value);\n  };\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n  const formSubmitHandler = e => {\n    setEnteredNameTouched(true);\n    e.preventDefault();\n    // If input is empty, do nothing (dont run code below i.e return)\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n\n    // nameInputRef.current.value = \"\"; => not ideal, leave DOM manipulation to react and not vanilla JS\n    setEnteredName(\"\"); // set state input to an empty string\n    setEnteredEmail(\"\"); // set state input to an empty string\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  /* Name input should be invalid if only both setEnteredNameIsValid is false\n  AND enteredNameTouched (user had a chance to edit input field) is true */\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName //bind the value to set setEnteredName to empty string\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail //bind the value to set setEnteredName to empty string\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"Yx6QdrMUaWLrEdxeJA4sbmU6WT8=\", false, function () {\n  return [useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","test","emailInputIsInvalid","formIsValid","emailInputHandler","e","target","emailInputBlurHandler","formSubmitHandler","setEnteredNameTouched","preventDefault","console","log","setEnteredName","nameInputClasses","nameInputIsInvalid","emailInputClasses"],"sources":["/home/vijay/Desktop/Udemy-Schwarzmuller/forms-&-userinput/01-starting-project/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hooks/useInput\";\n\nconst SimpleInput = props => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n  } = useInput(value => {\n    value.trim() !== \"\";\n  });\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredEmailIsValid = /\\S+@\\S+\\.\\S+/.test(enteredEmail);\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputHandler = e => {\n    setEnteredEmail(e.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmitHandler = e => {\n    setEnteredNameTouched(true);\n\n    e.preventDefault();\n    // If input is empty, do nothing (dont run code below i.e return)\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n\n    // nameInputRef.current.value = \"\"; => not ideal, leave DOM manipulation to react and not vanilla JS\n    setEnteredName(\"\"); // set state input to an empty string\n    setEnteredEmail(\"\"); // set state input to an empty string\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  /* Name input should be invalid if only both setEnteredNameIsValid is false\n  AND enteredNameTouched (user had a chance to edit input field) is true */\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName} //bind the value to set setEnteredName to empty string\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail} //bind the value to set setEnteredName to empty string\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}