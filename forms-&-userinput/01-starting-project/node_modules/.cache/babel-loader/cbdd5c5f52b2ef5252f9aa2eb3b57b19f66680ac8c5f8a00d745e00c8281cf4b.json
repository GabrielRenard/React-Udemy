{"ast":null,"code":"var _jsxFileName = \"/home/vijay/Desktop/Udemy-Schwarzmuller/forms-&-userinput/01-starting-project/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // Checks if user had a chance of editing the input\n\n  const nameInputHandler = e => {\n    setEnteredName(e.target.value); // set entered name on each keystroke\n  };\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    // If input is empty, do nothing (dont run code below i.e return)\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n    setEnteredNameTouched(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value; // set entered name only upon submit\n    console.log(enteredValue);\n\n    // nameInputRef.current.value = \"\"; => not ideal, leave DOM manipulation to react and not vanilla JS\n    setEnteredName(\"\"); // set state input to an empty string\n  };\n\n  /* Name input should be invalid if only both setEnteredNameIsValid is false\n  AND enteredNameTouched (user had a chance to edit input field) is true */\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        value: enteredName //bind the value to set setEnteredName to empty string\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"rzssK21dFRq2ebNqydyxQX3pi1I=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputHandler","e","target","value","formSubmitHandler","preventDefault","trim","console","log","enteredValue","current","nameInputIsInvalid","nameInputClasses"],"sources":["/home/vijay/Desktop/Udemy-Schwarzmuller/forms-&-userinput/01-starting-project/src/components/SimpleInput.js"],"sourcesContent":["import { useRef, useState } from \"react\";\n\nconst SimpleInput = props => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // Checks if user had a chance of editing the input\n\n  const nameInputHandler = e => {\n    setEnteredName(e.target.value); // set entered name on each keystroke\n  };\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    // If input is empty, do nothing (dont run code below i.e return)\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    setEnteredNameTouched(true);\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value; // set entered name only upon submit\n    console.log(enteredValue);\n\n    // nameInputRef.current.value = \"\"; => not ideal, leave DOM manipulation to react and not vanilla JS\n    setEnteredName(\"\"); // set state input to an empty string\n  };\n\n  /* Name input should be invalid if only both setEnteredNameIsValid is false\n  AND enteredNameTouched (user had a chance to edit input field) is true */\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputHandler}\n          value={enteredName} //bind the value to set setEnteredName to empty string\n        />\n      </div>\n      {nameInputIsInvalid && (\n        <p className=\"error-text\">Name must not be empty</p>\n      )}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEzC,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAAA;EAC3B,MAAMC,YAAY,GAAGJ,MAAM,EAAE;EAC7B,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACM,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACQ,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErE,MAAMU,gBAAgB,GAAGC,CAAC,IAAI;IAC5BN,cAAc,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAClC,CAAC;;EAED,MAAMC,iBAAiB,GAAGH,CAAC,IAAI;IAC7BA,CAAC,CAACI,cAAc,EAAE;IAClB;IACA,IAAIX,WAAW,CAACY,IAAI,EAAE,KAAK,EAAE,EAAE;MAC7BT,qBAAqB,CAAC,KAAK,CAAC;MAC5B;IACF;IAEAA,qBAAqB,CAAC,IAAI,CAAC;IAC3BE,qBAAqB,CAAC,IAAI,CAAC;IAE3BQ,OAAO,CAACC,GAAG,CAACd,WAAW,CAAC;IACxB,MAAMe,YAAY,GAAGhB,YAAY,CAACiB,OAAO,CAACP,KAAK,CAAC,CAAC;IACjDI,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;;IAEzB;IACAd,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;AACF;EACE,MAAMgB,kBAAkB,GAAG,CAACf,kBAAkB,IAAIE,kBAAkB;EAEpE,MAAMc,gBAAgB,GAAGD,kBAAkB,GACvC,sBAAsB,GACtB,cAAc;EAElB,oBACE;IAAM,QAAQ,EAAEP,iBAAkB;IAAA,wBAChC;MAAK,SAAS,EAAEQ,gBAAiB;MAAA,wBAC/B;QAAO,OAAO,EAAC,MAAM;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eACvC;QACE,GAAG,EAAEnB,YAAa;QAClB,IAAI,EAAC,MAAM;QACX,EAAE,EAAC,MAAM;QACT,QAAQ,EAAEO,gBAAiB;QAC3B,KAAK,EAAEN,WAAY,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACpB;IAAA;MAAA;MAAA;MAAA;IAAA,QACE,EACLiB,kBAAkB,iBACjB;MAAG,SAAS,EAAC,YAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAC1B,eACD;MAAK,SAAS,EAAC,cAAc;MAAA,uBAC3B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAuB;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEX,CAAC;AAAC,GAzDIpB,WAAW;AAAA,KAAXA,WAAW;AA2DjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}